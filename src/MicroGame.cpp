/*MicroGame library by Jason A. Naquin.
Adafruit_SSD1306 library written by Limor Fried/Ladyada for Adafruit Industries*/

#include "Arduino.h"
#include "MicroGame.h"
#include "Adafruit_SSD1306.h"

String versionNum = "v1.2.1";

MicroGame::MicroGame(){}

Adafruit_SSD1306 MicroGame::display = Adafruit_SSD1306(128, 64, &Wire);

unsigned char PROGMEM MicroGame::splashScreen[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x03, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0x00, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x0F, 0xFC, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1C, 0x3E, 0x1F, 0x8E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0xE0, 0x01, 0xE7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x63, 0x80, 0x00, 0x71, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC6, 0x07, 0xE0, 0x18, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x8C, 0x1F, 0x00, 0x0C, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x98, 0x78, 0x00, 0x06, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x30, 0xE0, 0x00, 0x03, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x21, 0xC0, 0x00, 0x01, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x63, 0x80, 0x00, 0x01, 0x98, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x47, 0x80, 0x00, 0x00, 0x98, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0xC7, 0x00, 0x00, 0x00, 0xC8, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x8F, 0x1F, 0xFF, 0xC0, 0x4C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x8F, 0x00, 0x00, 0x20, 0x4C, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x8C, 0x07, 0xF8, 0x10, 0x4C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x08, 0x04, 0x08, 0x10, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x04, 0x08, 0x10, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x27, 0xF9, 0x10, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x02, 0x70, 0x02, 0x90, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x02, 0x20, 0x01, 0x10, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x81, 0x07, 0xF8, 0x20, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x80, 0x88, 0x04, 0x40, 0x4C, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x80, 0x70, 0x03, 0x80, 0x4C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x80, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0xC0, 0x00, 0x00, 0x00, 0xD8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0x40, 0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x92, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x84, 0x71, 0xF3, 0xF0, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x39, 0x8C, 0x73, 0x9B, 0x89, 0xD8, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x18, 0x11, 0xCC, 0x73, 0x83, 0x8B, 0x8C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x11, 0xFE, 0x77, 0x83, 0x8B, 0x8C, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x01, 0x83, 0x83, 0xFE, 0x73, 0x83, 0x8B, 0x8C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x0F, 0x82, 0xEE, 0x73, 0x9B, 0xF1, 0xD8, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x18, 0x3E, 0x02, 0x4F, 0x71, 0xF3, 0xB8, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x04, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x02, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x7C, 0x7F, 0x00, 0x7C, 0x0F, 0x03, 0x83, 0x00, 0x1F, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x01, 0xF0, 0x00, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x7F, 0x00, 0xC0, 0x30, 0x30, 0x7F, 0xC0, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x78, 0xF3, 0x91, 0xC6, 0x38, 0x32, 0xF8, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x71, 0xF0, 0x03, 0xE2, 0x38, 0x78, 0xF8, 0x0F, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x73, 0xF0, 0x03, 0xF0, 0x7C, 0xF8, 0xFF, 0xCF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xF0, 0x07, 0xF0, 0x7E, 0xF8, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x03, 0xF7, 0xCD, 0xF8, 0x7F, 0xF8, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xF0, 0x48, 0xF8, 0xDE, 0x7C, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x03, 0xF0, 0xD0, 0xFC, 0x8C, 0x7C, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xF3, 0xBF, 0xFE, 0x84, 0x7C, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x20, 0x7F, 0x80, 0x3E, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

/*Button and buzzer constants - Configured for a Seeeduino Xiao (SAMD21 board)
These will need to be changed if using a different microcontroller or button layout*/
int MicroGame::btnLUp = 10;    //left up
int MicroGame::btnLDn = 7;     //left down
int MicroGame::btnLLt = 8;     //left left
int MicroGame::btnLRt = 9;     //left right
int MicroGame::btnRUp = 3;     //right up
int MicroGame::btnRDn = 6;     //right down

//TODO 062825 - The breadboard version of this wont use these pins
int MicroGame::btnRLt = 2;     //right left
int MicroGame::btnRRt = 1;     //right right

int MicroGame::buzPin = 0;     //buzzer

/*Initialize all pins. This uses the internal pullup resistor of the Xiao so buttons are "pressed" when the value is LOW*/
void MicroGame::Begin(){
  pinMode(MicroGame::btnLUp, INPUT_PULLUP);
  pinMode(MicroGame::btnLDn, INPUT_PULLUP);
  pinMode(MicroGame::btnLLt, INPUT_PULLUP);
  pinMode(MicroGame::btnLRt, INPUT_PULLUP);
  pinMode(MicroGame::btnRUp, INPUT_PULLUP);
  pinMode(MicroGame::btnRDn, INPUT_PULLUP);
  pinMode(MicroGame::btnRLt, INPUT_PULLUP);
  pinMode(MicroGame::btnRRt, INPUT_PULLUP);  
  pinMode(MicroGame::buzPin, OUTPUT);
}


void MicroGame::Beep(int note, int duration)
{
  //Play tone on buzzerPin
  tone(MicroGame::buzPin, note, duration);
  delay(duration);
  noTone(MicroGame::buzPin);
  delay(50);
}

void MicroGame::RenderSplashScreen(){
    MicroGame::display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
    MicroGame::display.clearDisplay();
    MicroGame::display.drawBitmap(0, 0, MicroGame::splashScreen, 128, 64, WHITE);
    MicroGame::display.setCursor(0,0);
    MicroGame::display.setTextSize(1);
    MicroGame::display.setTextColor(WHITE);
    MicroGame::display.println(versionNum);
    MicroGame::display.display();
    MicroGame::Beep(100, 150);
    MicroGame::Beep(200, 150);
    MicroGame::Beep(300, 150);
    MicroGame::Beep(400, 150);
    MicroGame::Beep(500, 150);
    MicroGame::Beep(600, 150);
    MicroGame::Beep(700, 500);
    delay(2000);
}

/*Control functions for when a button is pressed
in-scetch example: if(microGame.PressLUp()){*code here*}*/

/*Press Left Up*/
bool MicroGame::PressLUp(){
    if(digitalRead(MicroGame::btnLUp) == 0){return true;}
    else{return false;}
}
/*Press Left Down*/
bool MicroGame::PressLDn(){
    if(digitalRead(MicroGame::btnLDn) == 0){return true;}
    else{return false;}
}
/*Press Left Left*/
bool MicroGame::PressLLt(){
    if(digitalRead(MicroGame::btnLLt) == 0){return true;}
    else{return false;}
}
/*Press Left Right*/
bool MicroGame::PressLRt(){
    if(digitalRead(MicroGame::btnLRt) == 0){return true;}
    else{return false;}
}
/*Press Right Up*/
bool MicroGame::PressRUp(){
    if(digitalRead(MicroGame::btnRUp) == 0){return true;}
    else{return false;}
}
/*Press Right Down*/
bool MicroGame::PressRDn(){
    if(digitalRead(MicroGame::btnRDn) == 0){return true;}
    else{return false;}
}
/*Press Right Left*/
bool MicroGame::PressRLt(){
    if(digitalRead(MicroGame::btnRLt) == 0){return true;}
    else{return false;}
}
/*Press Right Right*/
bool MicroGame::PressRRt(){
    if(digitalRead(MicroGame::btnRRt) == 0){return true;}
    else{return false;}
}

